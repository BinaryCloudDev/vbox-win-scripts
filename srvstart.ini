# An annotated generic srvstart control file (with all options listed)
#   SRVSTART reads the control file, applying all keywords before the first section
#   (Sections are defined by square brackets [], similar to windows ini file conventions)
#   It then finds the section whose name matches the supplied window or service name,
#   and applies all keywords in that section.
#
#  To use an option uncomment the line beginning ##


# *****   GLOBAL OPTIONS   *****
#   Global options apply to all services managed by that ini file.


# ***  Environment Variable Options  ***
#
#    Note that SRVSTART applies environment variable substitution to all keyword
#    values which are filenames, pathnames or directories (new in version 1.1).
#    For this to work, the environment variable must already be defined
#    (either globally to Windows NT or using the env directive) at the time that
#    the directive is read.

# ENV=var=value
#   Set the environment variable var equal to value before running the program
#     Environment values which contain embedded environment variables will have
#     these substituted, but only if they are already defined. For example:
#       myvar1=myvalue1
#       myvar2=my_%myvar1%_val
#     will set myvar1 to myvalue1 and myvar2 to my_myvalue1_val. However
#       myvar2=my_%myvar1%_val
#       myvar1=myvalue1 ...
#     will set myvar2 to my_%myvar1%_val (since myvar1 is not defined at this point.
#
#   Note that in service mode, the only environment variables available when SRVSTART
#   starts are the system environment variables. (These are the environment variables
#   in the upper list box in In #   Control Panel|System|Environment.) If the service
#   is started using a named Windows NT account, then the environment for that account
#   will also available.
#
##env=var=value

# PATH=path
#   set the value of the %PATH% environment variable to path
#    Default path if not given : %SYBASE%\install;SYBASE%\bin;%SYBASE%\dll;%SystemRoot%;%SystemRoot%\system32
#
##path=path


# ***  Sybase Environment Variables  ***

# SYBASE=sybase
#   Set the value of the %SYBASE% environment variable to sybase
#
##sybase=sybase

# SYBPATH=path
#   Assign a default %PATH% based on this value of sybase instead of value supplied using sybase=
#
#   The sybpath option assigns a path as in the path option, but using the value supplied to sybpath, instead of sybase=.
#   For example, -q C:\NEWSYB would assign a path of the form C:\NEWSYB\install;C:\NEWSYB\bin;... etc.
#
##sybpath=path

# LIB=libdir
#   set the value of the %LIB% environment variable to libdir#
#
##lib=libdir


# ***  Process Options   ***

#  PRIORITY-priority
#   start the command at the given execution priority(idle, normal, high, real) 
#
#    * idle to run only when the CPU is otherwise idle
#    * normal to run at normal priority
#    * high to run at high priority
#    * real to run at real time priority 
#
##priority=priority


# ***  Startup Options  ***

# STARTUP_DELAY=seconds
#    How long SRVSTART waits before reporting a "started" status to the NT Service Control Manager
#
# SRVSTART waits this number of seconds before reporting to the Windows NT Service Control Manager that the service has started.
# Use this option if the command takes a long time to initialise (default zero).
#
##startup_delay=seconds

# WAIT_TIME=seconds
#   program status check interval in seconds
#
#   SRVSTART regularly checks the process it has started to see if it is still running.
#   If it has finished, then SRVSTART reports a "service stopped" status to the Service
#   Control Manager and then exits. WAIT_TIME defines how often this check is done (default every second). 
#
##wait_time=seconds


# ***  Drive Mappings  ***

# NETWORK_DRIVE=driveletter=networkpath
#   This directive maps the drive driveletter (do not include the colon) to the network path networkpath
#
#   networkpath should be a full network path including the host name and initial backslashes.
#   Note that for this to work, the service must be started using a named user who has the
#   appropriate privileges to access networkpath (since LocalSystem) does not have any network privileges.
#
##network_drive=driveletter=networkpath

# LOCAL_DRIVE=driveletter=localpath
#   This directive maps the drive driveletter (do not include the colon) to the local path networkpath
#
#   This is analogous to entering the SUBST command at the command line.
#   networkpath should be a full pathname including the drive letter. Note that such
#   substitutions are global and immediately visible to other users on the same computer.
#   No special privileges are required (ie LocalSystem has sufficient authority to do this). 
#
##local_drive=driveletter=localpath




#  *****   DEBUGGING OPTIONS   *****
#   Debugging options apply to the srvstart process itself not the managed services.

# DEBUG=level
#    set the SRVSTART debug level: 0=none, 1=normal, 2=verbose
#       *  0 prevents any output other than error messages.
#       *  1 outputs a few informational messages.
#       *  2 outputs a large number of debug messages. 
#
#    Note that you must use the Debug executables for level 2 (you can find these in the Debug directory of the full distribution).
#
##debug=level

# DEBUG_OUT=target 
#   By default, SRVSTART logs error messages to the Event Log in service mode, and to stdout otherwise.
#
#    * -          hyphen : messages will go to stdout. This does not apply to service mode (messages will just disappear).
#    * LOG        LOG (uppercase) : debug messages will be sent to the Windows NT Event Log.
#    * pathname   Debug messages will be appended to this file. 
#
#   For example, the directive debug_out=%TEMP%\myservice.out will log debug output to the
#   file myservice.out in a temporary directory.
#
#   If target is a path name whose first character is > (greater than), SRVSTART will truncate the file before writing to it.
#
##debug_out=target




# *****  SERVICE DEFINITION  *****
#   A single instance of SRVSTART can manage multiple individual services of it's own.
#   This is comparable to the way the windows svchost does things.
#   (duplicate the following for each service you want to run)

# [MY_SERVICE]
#   SRVSTART managed services are defined in ini style congiuration sections
#   (each begun with square brackets [], with the square bracket containing the name
#   of the managed service). The service definition ends either at the start of
#   another service definition or the end of file.
#
##[MY_SERVICE]

# STARTUP=program
#   This defines the service program command. It replaces the program and program_parameters which are supplied on the SRVSTART command line.
#   You must provide a startup directive for each service which starts using a control file. All other directives are optional.
#   e.g. startup=C:\MYPROG\MYPROG.EXE -a -b -c xxxx yyyy zzz
#
#   The command to run, program [ program_parameters ] may be any executable program, that is anything with extension .com, .exe or .bat.
#   program and program_parameters may refer to environment variables using the %var% syntax.
#     (These will be substituted (not recursively, which is done while defining the environment variables) where encountered
#     For example %HOME%\bin\mycommand.exe %SYSTEMROOT%.)
#
##startup=program [ program_parameters ...]

# STARTUP_DIR=path
#   This defines the startup directory. It should be a full pathname including a drive letter.
#
##startup_dir=path

# WAIT=program
#   This defines a command that SRVSTART will run after starting the service program. 
#
#   This should wait for the service program to enter a "running" state (eg wait for a database server to complete recovery).
#   It should exit with a status of 0 once the service program is up and running.
#   It should exit with a non-zero status if the service program has failed or is never going to enter a running status.
#   Once this command has exited with a status of 0, SRVSTART considers that the service program is running.
#
##wait=program [ program_parameters ... ]

# SHUTDOWN_METHOD={kill | command | winmessage}
#    This defines the action that SRVSTART will take to shutdown the service program (service mode only).
#    SRVSTART will take this action if it receives a "shutdown" request from the SCM
#    (eg a user runs NET STOP or stops the service using Control Panel | Services).
#     * For shutdown_method=kill, SRVSTART will shut down the service program using the Win32 TerminateProcess() API.
#     * For shutdown_method=command, SRVSTART will run the command given by the shutdown directive.
#     * For shutdown_method=winmessage, SRVSTART will send a Windows CLOSE message to all Windows
#       opened by the service program (new in version 1.1). 
#
#   kill is the default, and this directive can be omitted.
#   Note that kill is equivalent to a Unix kill -9 and leaves DLLs in an undefined state (ie it does not call the DLL termination routines).
#   I have not to date observed any problems with this (but it clearly depends on the program you are shutting down).
#   Note also that winmessage will not work for Win32 console programs.
#
##shutdown_method={kill | command | winmessage}

# SHUTDOWN=program
#   This defines a command to shut down the service program.
#
#   SRVSTART will run this command if it receives a "shutdown" or stop request from the SCM
#   (eg a user runs NET STOP) or stops the service using Control Panel | Services.
#   If this directive is provided, then shutdown_method=command is implied and can be omitted.
#
##shutdown=program [ program_parameters ... ]

# AUTO_RESTART={y|n}
#   This enables service restart if the SRVSTART service exits UNEXPECTEDLY
#
#   If auto_restart is set, then SRVSTART will restart the service program if it
#   exits for any reason. (The assumption here is that the service has crashed.)
#   auto_restart does not, of course, restart the service program if it is stopped by request (eg NET STOP or Control Panel|Services).
#   auto_restart does not restart the service program if it thinks that Windows NT is shutting down.
#     Unfortunately it does not appear to be possible to determine this unambiguously.
#     If you are irritated by services restarting during Windows NT shutdown, then increase the value of restart_interval to, say, a minute. 
#
##auto_restart={y|n}

# RESTART_INTERVAL=seconds
#   auto_restart is enabled and restart_interval is defined, then before restarting, SRVSTART will wait seconds seconds.
#
##restart_interval=seconds